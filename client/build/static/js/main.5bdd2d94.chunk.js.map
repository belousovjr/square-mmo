{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PORT","process","url","socket","openSocket","on","msg","alert","App","getCubes","a","axios","get","data","setState","cubes","console","log","getCoords","cube","fromTime","toTime","fromX","toX","fromY","toY","globDiff","curDiff","time","factor","x","y","canvasClick","event","emit","currentCube","state","pageX","pageY","post","drawLoop","Date","now","ctx","beginPath","fillStyle","rect","c","width","height","fill","forEach","requestAnimationFrame","this","document","getElementById","getContext","onClick","id","map","key","name","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAOMA,EAAOC,mHAAYD,MAAQ,IAC3BE,EAAG,2BAAuBF,GAE1BG,EAASC,IAAW,yBAE1BD,EAAOE,GAAG,SAAS,SAACC,GAChBC,MAAM,Y,IAGWC,E,kDACjB,aAAc,IAAD,8BACT,gBAMJC,SAPa,sBAOF,8BAAAC,EAAA,+EAGkBC,IAAMC,IAAN,UAAaV,EAAb,SAHlB,gBAGIW,EAHJ,EAGIA,KACP,EAAKC,SAAS,CAACC,MAAOF,IAJnB,gDAQHG,QAAQC,IAAR,MARG,yDAPE,EAmBbC,UAAY,SAACC,GAAU,IACZC,EAA4CD,EAA5CC,SAAUC,EAAkCF,EAAlCE,OAAQC,EAA0BH,EAA1BG,MAAOC,EAAmBJ,EAAnBI,IAAKC,EAAcL,EAAdK,MAAOC,EAAON,EAAPM,IAEtCC,EAAWL,EAASD,EACtBO,EAAU,EAAKC,KAAOR,EAEvBO,EAAUD,IAASC,EAAUD,GAEhC,IAAMG,EAASH,EAAWC,EAO1B,MAAO,CAACG,EAFER,GAHIC,EAAMD,GAGMO,EAEfE,EADDP,GAHIC,EAAMD,GAGMK,IAjCjB,EAsCbG,YAtCa,uCAsCC,WAAOC,GAAP,mBAAAvB,EAAA,6DACVP,EAAO+B,KAAK,SAELC,EAAe,EAAKC,MAApBD,YAEAE,EAAgBJ,EAAhBI,MAAOC,EAASL,EAATK,MALJ,SAOJ3B,IAAM4B,KAAN,UAAcrC,EAAd,sBAA+BiC,GAAe,CAChDb,MAAO,EACPE,MAAO,EACPD,IAAKc,EACLZ,IAAKa,IAXC,2CAtCD,wDAoDbE,SAAW,WAAO,IACPzB,EAAS,EAAKqB,MAAdrB,MACP,EAAKa,KAAOa,KAAKC,MAEjB,EAAKC,IAAIC,YACT,EAAKD,IAAIE,UAAY,QACrB,EAAKF,IAAIG,KAAK,EAAG,EAAG,EAAKC,EAAEC,MAAO,EAAKD,EAAEE,QACzC,EAAKN,IAAIO,OAETnC,EAAMoC,SAAQ,SAAAhC,GAAS,IAAD,EAEH,EAAKD,UAAUC,GAAvBW,EAFW,EAEXA,EAAGC,EAFQ,EAERA,EAEV,EAAKY,IAAIC,YACT,EAAKD,IAAIE,UAAY,SACrB,EAAKF,IAAIG,KAAKhB,EAAGC,EAAG,IAAK,KACzB,EAAKY,IAAIO,UAGbE,sBAAsB,EAAKZ,WArE3B,EAAKZ,KAAOa,KAAKC,MACjB,EAAKN,MAAQ,CAACrB,MAAO,GAAIoB,YAAa,GACtC,EAAKY,EAAI,KACT,EAAKJ,IAAM,KALF,E,gEA0ETU,KAAK5C,WACL4C,KAAKN,EAAIO,SAASC,eAAe,UACjCF,KAAKV,IAAMU,KAAKN,EAAES,WAAW,MAE7BJ,sBAAsBC,KAAKb,Y,+BAStB,IACEzB,EAASsC,KAAKjB,MAAdrB,MACP,OACI,6BACI,4BAAQ0C,QAASJ,KAAKrB,YAAcgB,MAAO,KAAMC,OAAQ,IAAKS,GAAG,WAChE3C,EAAM4C,KAAI,SAAAxC,GAAI,OAAI,yBAAKyC,IAAKzC,EAAKuC,IAAKvC,EAAK0C,c,GA7F3BC,IAAMC,WCJnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASC,eAAe,SDyHpB,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMC,a","file":"static/js/main.5bdd2d94.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios'\n\nimport openSocket from 'socket.io-client';\n\n\nconst PORT = process.env.PORT || 3000;\nconst url = `http://localhost:${PORT}`\n\nconst socket = openSocket('http://localhost:9000');\n\nsocket.on('click', (msg) => {\n    alert('click')\n});\n\nexport default class App extends React.Component{\n    constructor(){\n        super()\n        this.time = Date.now()\n        this.state = {cubes: [], currentCube: 1}\n        this.c = null\n        this.ctx = null\n    }\n    getCubes = async () => {\n\n        try {\n            const {data} = await axios.get(`${url}/get`)\n            this.setState({cubes: data})\n\n        }\n        catch (e) {\n            console.log(e)\n        }\n\n    }\n    getCoords = (cube) => {\n        const {fromTime, toTime, fromX, toX, fromY, toY} = cube\n\n        const globDiff = toTime - fromTime\n        let curDiff = this.time - fromTime\n\n        if(curDiff > globDiff)curDiff = globDiff\n\n        const factor = globDiff / curDiff\n\n        const diffX = toX - fromX\n        const diffY = toY - fromY\n\n        const x = fromX + diffX * factor\n        const y = fromY + diffY * factor\n        return {x, y}\n\n    }\n\n    canvasClick = async (event) => {\n        socket.emit('click');\n\n        const {currentCube} = this.state\n\n        const {pageX, pageY} = event\n\n        await axios.post(`${url}/change?id=${currentCube}`, {\n            fromX: 0,\n            fromY: 0,\n            toX: pageX,\n            toY: pageY,\n        })\n    }\n    drawLoop = () => {\n        const {cubes} = this.state\n        this.time = Date.now()\n\n        this.ctx.beginPath();\n        this.ctx.fillStyle = 'black'\n        this.ctx.rect(0, 0, this.c.width, this.c.height);\n        this.ctx.fill();\n\n        cubes.forEach(cube => {\n\n            const {x, y} = this.getCoords(cube)\n\n            this.ctx.beginPath();\n            this.ctx.fillStyle = 'orange'\n            this.ctx.rect(x, y, 100, 100);\n            this.ctx.fill();\n        })\n\n        requestAnimationFrame(this.drawLoop)\n    }\n    componentDidMount() {\n        this.getCubes()\n        this.c = document.getElementById('canvas')\n        this.ctx = this.c.getContext('2d')\n\n        requestAnimationFrame(this.drawLoop)\n/*\n        this.ctx.beginPath();\n        this.ctx.fillStyle = 'black'\n        this.ctx.rect(0, 0, this.c.width, this.c.height);\n        this.ctx.fill();\n        */\n    }\n\n    render(){\n        const {cubes} = this.state\n        return (\n            <div>\n                <canvas onClick={this.canvasClick}  width={1500} height={700} id=\"canvas\" />\n                {cubes.map(cube => <div key={cube.id}>{cube.name}</div>)}\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}