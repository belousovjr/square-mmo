{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["hostname","window","location","PORT","protocol","url","socket","openSocket","connect","App","getCubes","a","loading","axios","get","data","setState","cubes","console","log","getCoords","cube","fromTime","toTime","fromX","toX","fromY","toY","globDiff","curDiff","time","factor","x","y","canvasClick","event","state","currentCube","pageX","pageY","find","c","id","post","emit","drawLoop","Date","now","ctx","beginPath","fillStyle","rect","width","height","fill","forEach","colors","lineWidth","strokeStyle","stroke","font","fillText","name","requestAnimationFrame","this","document","getElementById","getContext","on","msg","onClick","map","selectClass","style","backgroundColor","className","key","React","Component","Boolean","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0de953fa.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nimport openSocket from \"socket.io-client\";\n\nconst hostname = window.location.hostname;\n\nconst PORT = hostname === \"localhost\" ? 3000 : \"\";\n\nconst protocol = window.location.protocol;\n\nconst url = `${protocol}//${hostname}:${PORT}`;\n\nconst socket = openSocket.connect(url); //openSocket(`http://${hostname}:9000`);*/\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.time = Date.now();\n    this.state = { cubes: [], currentCube: 1 };\n    this.c = null;\n    this.ctx = null;\n    this.colors = [\"red\", \"orange\", \"green\"];\n    this.loading = true;\n  }\n  getCubes = async () => {\n    try {\n      this.loading = true;\n      const { data } = await axios.get(`${url}/get`);\n      this.setState({ cubes: data });\n    } catch (e) {\n      console.log(e);\n    } finally {\n      this.loading = false;\n    }\n  };\n  getCoords = cube => {\n    const { fromTime, toTime, fromX, toX, fromY, toY } = cube;\n\n    const globDiff = toTime - fromTime;\n    let curDiff = this.time - fromTime;\n\n    if (curDiff < globDiff) {\n      const factor = globDiff / curDiff;\n\n      const diffX = toX - fromX;\n      const diffY = toY - fromY;\n\n      const x = fromX + diffX / factor;\n      const y = fromY + diffY / factor;\n      return { x, y };\n    } else return { x: toX, y: toY };\n  };\n\n  canvasClick = async event => {\n      this.loading = true;\n\n    const { currentCube, cubes } = this.state;\n\n    const { pageX, pageY } = event;\n\n    const cube = cubes.find(c => c.id === currentCube);\n\n    if (cube) {\n      const { x, y } = this.getCoords(cube);\n\n      await axios.post(`${url}/change?id=${currentCube}`, {\n        fromX: x,\n        fromY: y,\n        toX: pageX - 50,\n        toY: pageY - 50\n      });\n    }\n    socket.emit(\"click\");\n  };\n  drawLoop = () => {\n    if (!this.loading) {\n      const { cubes, currentCube } = this.state;\n      this.time = Date.now();\n\n      this.ctx.beginPath();\n      this.ctx.fillStyle = \"black\";\n      this.ctx.rect(0, 0, this.c.width, this.c.height);\n      this.ctx.fill();\n\n      cubes.forEach(cube => {\n        const { x, y } = this.getCoords(cube);\n\n        this.ctx.beginPath();\n        this.ctx.fillStyle = this.colors[cube.id];\n        this.ctx.rect(x, y, 100, 100);\n        this.ctx.fill();\n\n        if (cube.id == currentCube) {\n          this.ctx.beginPath();\n          this.ctx.lineWidth = 7;\n          this.ctx.strokeStyle = \"red\";\n          this.ctx.rect(x, y, 100, 100);\n          this.ctx.stroke();\n        }\n\n        this.ctx.beginPath();\n        this.ctx.fillStyle = \"white\";\n        this.ctx.font = \"30px Arial\";\n        this.ctx.fillText(cube.name, x, y + 45);\n        this.ctx.fill();\n      });\n    }\n    requestAnimationFrame(this.drawLoop);\n  };\n  componentDidMount() {\n    this.getCubes();\n    this.c = document.getElementById(\"canvas\");\n    this.ctx = this.c.getContext(\"2d\");\n\n    socket.on(\"click\", msg => {\n      console.log(\"CLICK\");\n      this.getCubes();\n    });\n\n    requestAnimationFrame(this.drawLoop);\n  }\n\n  render() {\n    const { cubes, currentCube } = this.state;\n    return (\n      <div>\n        <canvas\n          onClick={this.canvasClick}\n          width={1500}\n          height={700}\n          id=\"canvas\"\n        />\n        <br />\n        {cubes.map(cube => {\n          const selectClass = cube.id === currentCube ? \"select\" : \"\";\n          return (\n            <div\n              style={{ backgroundColor: this.colors[cube.id] }}\n              onClick={() => {\n                this.setState({ currentCube: cube.id });\n              }}\n              className={`type ${selectClass}`}\n              key={cube.id}\n            >\n              {cube.name}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}