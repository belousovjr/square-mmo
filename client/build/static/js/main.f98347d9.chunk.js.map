{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["hostname","window","location","PORT","protocol","url","App","openSocket","connect","getCubes","a","axios","get","data","setState","cubes","console","log","getCoords","cube","fromTime","toTime","fromX","toX","fromY","toY","globDiff","curDiff","time","factor","x","y","canvasClick","event","state","currentCube","pageX","pageY","find","c","id","post","drawLoop","Date","now","ctx","beginPath","fillStyle","rect","width","height","fill","forEach","colors","lineWidth","strokeStyle","stroke","font","fillText","name","requestAnimationFrame","this","document","getElementById","getContext","onClick","map","selectClass","style","backgroundColor","className","key","React","Component","Boolean","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPASMA,EAAWC,OAAOC,SAASF,SAE3BG,EAAoB,cAAbH,EAA2B,IAAO,GAEzCI,EAAWH,OAAOC,SAASE,SAE3BC,EAAG,UAAMD,EAAN,aAAmBJ,EAAnB,YAA+BG,GAMnBG,GAJNC,IAAWC,QAAQH,G,kDAK9B,aAAc,IAAD,8BACT,gBASJI,SAVa,sBAUF,8BAAAC,EAAA,+EAGkBC,IAAMC,IAAN,UAAaP,EAAb,SAHlB,gBAGIQ,EAHJ,EAGIA,KACP,EAAKC,SAAS,CAACC,MAAOF,IAJnB,gDAQHG,QAAQC,IAAR,MARG,yDAVE,EAsBbC,UAAY,SAACC,GAAU,IACZC,EAA4CD,EAA5CC,SAAUC,EAAkCF,EAAlCE,OAAQC,EAA0BH,EAA1BG,MAAOC,EAAmBJ,EAAnBI,IAAKC,EAAcL,EAAdK,MAAOC,EAAON,EAAPM,IAEtCC,EAAWL,EAASD,EACtBO,EAAU,EAAKC,KAAOR,EAE1B,GAAGO,EAAUD,EAAS,CAEtB,IAAMG,EAASH,EAAWC,EAO1B,MAAO,CAACG,EAFER,GAHIC,EAAMD,GAGOO,EAEhBE,EADDP,GAHIC,EAAMD,GAGOK,GAGtB,MAAO,CAACC,EAAGP,EAAKQ,EAAGN,IAvCf,EA0CbO,YA1Ca,uCA0CC,WAAOC,GAAP,+BAAAvB,EAAA,2DAGmB,EAAKwB,MAA3BC,EAHG,EAGHA,YAAapB,EAHV,EAGUA,MAEbqB,EAAgBH,EAAhBG,MAAOC,EAASJ,EAATI,QAERlB,EAAOJ,EAAMuB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOL,MAP5B,yBAUK,EAAKjB,UAAUC,GAAvBW,EAVG,EAUHA,EAAGC,EAVA,EAUAA,EAVA,SAYJpB,IAAM8B,KAAN,UAAcpC,EAAd,sBAA+B8B,GAAe,CAChDb,MAAOQ,EACPN,MAAOO,EACPR,IAAKa,EACLX,IAAKY,IAhBC,2CA1CD,wDAgEbK,SAAW,WAAO,IAAD,EACgB,EAAKR,MAA3BnB,EADM,EACNA,MAAOoB,EADD,EACCA,YACd,EAAKP,KAAOe,KAAKC,MAEjB,EAAKC,IAAIC,YACT,EAAKD,IAAIE,UAAY,QACrB,EAAKF,IAAIG,KAAK,EAAG,EAAG,EAAKT,EAAEU,MAAO,EAAKV,EAAEW,QACzC,EAAKL,IAAIM,OAETpC,EAAMqC,SAAQ,SAAAjC,GAAS,IAAD,EAEH,EAAKD,UAAUC,GAAvBW,EAFW,EAEXA,EAAGC,EAFQ,EAERA,EAGV,EAAKc,IAAIC,YACT,EAAKD,IAAIE,UAAY,EAAKM,OAAOlC,EAAKqB,IACtC,EAAKK,IAAIG,KAAKlB,EAAGC,EAAG,IAAK,KACzB,EAAKc,IAAIM,OAEFhC,EAAKqB,IAAML,IACd,EAAKU,IAAIC,YACT,EAAKD,IAAIS,UAAY,EACrB,EAAKT,IAAIU,YAAc,MACvB,EAAKV,IAAIG,KAAKlB,EAAGC,EAAG,IAAK,KACzB,EAAKc,IAAIW,UAGb,EAAKX,IAAIC,YACT,EAAKD,IAAIE,UAAY,QACrB,EAAKF,IAAIY,KAAO,aAChB,EAAKZ,IAAIa,SAASvC,EAAKwC,KAAM7B,EAAIC,EAAI,IACrC,EAAKc,IAAIM,UAGbS,sBAAsB,EAAKlB,WAhG3B,EAAKd,KAAOe,KAAKC,MACjB,EAAKV,MAAQ,CAACnB,MAAO,GAAIoB,YAAa,GACtC,EAAKI,EAAI,KACT,EAAKM,IAAM,KACX,EAAKQ,OAAS,CACV,MAAO,SAAU,SAPZ,E,gEAqGTQ,KAAKpD,WACLoD,KAAKtB,EAAIuB,SAASC,eAAe,UACjCF,KAAKhB,IAAMgB,KAAKtB,EAAEyB,WAAW,MAO7BJ,sBAAsBC,KAAKnB,Y,+BAGtB,IAAD,SACyBmB,KAAK3B,MAA3BnB,EADH,EACGA,MAAOoB,EADV,EACUA,YACd,OACI,6BACI,4BAAQ8B,QAASJ,KAAK7B,YAAciB,MAAO,KAAMC,OAAQ,IAAKV,GAAG,WACjE,6BACCzB,EAAMmD,KAAI,SAAA/C,GACP,IAAMgD,EAAchD,EAAKqB,KAAOL,EAAc,SAAW,GACzD,OAAO,yBAAKiC,MAAO,CAACC,gBAAiB,EAAKhB,OAAOlC,EAAKqB,KAAMyB,QAAS,WAAO,EAAKnD,SAAS,CAACqB,YAAahB,EAAKqB,MAAO8B,UAAS,eAAUH,GAAeI,IAAKpD,EAAKqB,IAAKrB,EAAKwC,c,GA1H7Ja,IAAMC,YCTnBC,QACW,cAA7BzE,OAAOC,SAASF,UAEe,UAA7BC,OAAOC,SAASF,UAEhBC,OAAOC,SAASF,SAAS2E,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASC,eAAe,SDyHpB,kBAAmBgB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,a","file":"static/js/main.f98347d9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios'\n\nimport openSocket from 'socket.io-client';\n\n\n\n\nconst hostname = window.location.hostname\n\nconst PORT = hostname === 'localhost' ? 3000 : ''\n\nconst protocol = window.location.protocol\n\nconst url = `${protocol}//${hostname}:${PORT}`\n\nconst socket = openSocket.connect(url)//openSocket(`http://${hostname}:9000`);*/\n\n\n\nexport default class App extends React.Component{\n    constructor(){\n        super()\n        this.time = Date.now()\n        this.state = {cubes: [], currentCube: 1}\n        this.c = null\n        this.ctx = null\n        this.colors = [\n            'red', 'orange', 'green'\n        ]\n    }\n    getCubes = async () => {\n\n        try {\n            const {data} = await axios.get(`${url}/get`)\n            this.setState({cubes: data})\n\n        }\n        catch (e) {\n            console.log(e)\n        }\n\n    }\n    getCoords = (cube) => {\n        const {fromTime, toTime, fromX, toX, fromY, toY} = cube\n\n        const globDiff = toTime - fromTime\n        let curDiff = this.time - fromTime\n\n        if(curDiff < globDiff){\n\n        const factor = globDiff / curDiff\n\n        const diffX = toX - fromX\n        const diffY = toY - fromY\n\n        const x = fromX + (diffX / factor)\n        const y = fromY + (diffY / factor)\n        return {x, y}\n        }\n        else return {x: toX, y: toY}\n    }\n\n    canvasClick = async (event) => {\n\n\n        const {currentCube, cubes} = this.state\n\n        const {pageX, pageY} = event\n\n        const cube = cubes.find(c => c.id === currentCube)\n\n        if(cube){\n        const {x, y} = this.getCoords(cube)\n\n        await axios.post(`${url}/change?id=${currentCube}`, {\n            fromX: x,\n            fromY: y,\n            toX: pageX,\n            toY: pageY,\n        })\n}\n      //  socket.emit('click');\n\n    }\n    drawLoop = () => {\n        const {cubes, currentCube} = this.state\n        this.time = Date.now()\n\n        this.ctx.beginPath();\n        this.ctx.fillStyle = 'black'\n        this.ctx.rect(0, 0, this.c.width, this.c.height);\n        this.ctx.fill();\n\n        cubes.forEach(cube => {\n\n            const {x, y} = this.getCoords(cube)\n\n\n            this.ctx.beginPath();\n            this.ctx.fillStyle = this.colors[cube.id]\n            this.ctx.rect(x, y, 100, 100);\n            this.ctx.fill();\n\n                if(cube.id == currentCube){\n                this.ctx.beginPath();\n                this.ctx.lineWidth = 7\n                this.ctx.strokeStyle = 'red'\n                this.ctx.rect(x, y, 100, 100);\n                this.ctx.stroke();\n            }\n\n            this.ctx.beginPath();\n            this.ctx.fillStyle = 'white'\n            this.ctx.font = \"30px Arial\";\n            this.ctx.fillText(cube.name, x , y + 45);\n            this.ctx.fill();\n        })\n\n        requestAnimationFrame(this.drawLoop)\n    }\n    componentDidMount() {\n        this.getCubes()\n        this.c = document.getElementById('canvas')\n        this.ctx = this.c.getContext('2d')\n\n       /* socket.on('click', (msg) => {\n            console.log('CLICK')\n            this.getCubes()\n        });*/\n\n        requestAnimationFrame(this.drawLoop)\n    }\n\n    render(){\n        const {cubes, currentCube} = this.state\n        return (\n            <div>\n                <canvas onClick={this.canvasClick}  width={1500} height={700} id=\"canvas\" />\n                <br />\n                {cubes.map(cube => {\n                    const selectClass = cube.id === currentCube ? 'select' : ''\n                    return <div style={{backgroundColor: this.colors[cube.id]}} onClick={() => {this.setState({currentCube: cube.id})}} className={`type ${selectClass}`} key={cube.id}>{cube.name}</div>})}\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}